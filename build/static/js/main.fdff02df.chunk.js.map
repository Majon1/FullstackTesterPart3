{"version":3,"sources":["components/Note.js","service/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"gOAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCoBzB,EA1BF,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAkBxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAnBV,aAmBwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAxBJ,aAwBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZ5BK,G,MAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKjB,UAAU,SACZiB,KCHHC,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGAuGSC,EAlGH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAEH,IA8CMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAM9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAckB,QAASc,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAC1C,EAAM2C,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL3C,KAAMA,EACNC,iBAAkB,kBApED,SAAAU,GACzB,IAAMX,EAAO6B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDmC,EACU3B,EAAIoC,GACXlC,MAAK,SAAAmC,GACNlB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOgD,SAEpDC,OAAM,SAAAC,GACLd,EAAgB,SAAD,OACJpC,EAAKK,QADD,sCAGf8C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAEnC,KAAOA,SAoDNyC,CAAmBpD,EAAKW,WAItD,0BAAM0C,SAjDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS0B,EACTnB,MAAM,IAAI6C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7BtB,EACUkB,GACP3C,MAAK,SAAAmC,GACJlB,EAASD,EAAMb,OAAOgC,IACtBhB,EAAW,SAsCX,2BAAO6B,MAAO9B,EACZ+B,SAlCiB,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB7B,EAAWsB,EAAMW,OAAOJ,UAkCpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,QC5GNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fdff02df.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n      id: 10000,\r\n      content: 'This note is not saved to server',\r\n      date: '2019-05-30T17:30:31.098Z',\r\n      important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n  }\r\n/*\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }*/\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  export default { \r\n    getAll: getAll, \r\n    create: create, \r\n    update: update \r\n  }\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './service/notes'\r\nimport './index.css'\r\nimport Notification from './components/Notification'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]) //for empty list useState([])\r\n  const [newNote, setNewNote] = useState('') // content of textbox\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n\r\n  // []/////<<<---DEPENDENCY ARRAY IS THIS >>>[]<<<< \r\n\r\n  //reflects current value of input, now we can create new notes!!\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  //inside app since it's only called from app! MAKES TEXT SHOW UP IN CONSOLE!\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n  //stores a list of all the notes to be displayed\r\n  //IF ELSE!!!!!! \r\n  const notesToShow = showAll\r\n    ? notes //if showAll = true\r\n    : notes.filter(note => note.important) //else\r\n  //IF ELSE!!!!!!!!!!!!\r\n  //Filter works as map, creates an array\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => \r\n          <Note\r\n            key={i}\r\n            note={note} \r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>//form gives box and buttons\r\n    //sethowAll\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}